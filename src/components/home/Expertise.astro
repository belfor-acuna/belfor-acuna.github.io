---
import IconComponent from '../atoms/IconComponent.jsx';

const features = [
  {
    id: 'expertise-1',
    name: 'Backend Development',
    icons: [
      { name: 'NestJS', icon: 'logos:nestjs' },
      { name: 'Express', icon: 'skill-icons:expressjs-dark' },
      { name: 'Spring Boot', icon: 'simple-icons:springboot' },
      { name: 'MySQL', icon: 'devicon:mysql-wordmark' },
      { name: 'MongoDB', icon: 'skill-icons:mongodb' },
      { name: 'PostgreSQL', icon: 'logos:postgresql' },
    ],
    description:
      'My primary focus is backend development, where I specialize in building robust and scalable server-side applications using Javascript, TypeScript, and Java. I enjoy designing and implementing APIs, integrating databases, and optimizing performance for large-scale systems. My preferred frameworks include Express, NestJS, and Spring Boot.',
  },

  {
    id: 'expertise-2',
    name: 'Build Automation Tools',
    icons: [
      { name: 'GitLab CI', icon: 'logos:gitlab' },
      { name: 'Docker', icon: 'logos:docker-icon' },
      { name: 'Google Cloud', icon: 'logos:google-cloud' },
      { name: 'Render', icon: 'logos:render' },
    ],
    description:
      'Experienced in creating and managing CI/CD pipelines using GitLab CI, Docker, Google Cloud, and Render to ensure seamless deployment and development workflows.',
  },
  {
    id: 'expertise-3',
    name: 'Serverless Computing Platforms',
    icons: [
      { name: 'Firebase', icon: 'logos:firebase' },
      { name: 'Cloudflare', icon: 'devicon:cloudflare' },
      { name: 'MinIO', icon: 'logos:minio' },
    ],
    description:
      'Proficient in leveraging cloud services like Firebase and Cloudflare to develop efficient serverless applications with minimal overhead and maximum scalability. I am currently exploring MinIO S3.',
  },
  {
    id: 'expertise-4',
    name: 'UX/UI Design & Prototyping',
    icons: [{ name: 'Figma', icon: 'logos:figma' }],
    description:
      "Skilled in designing intuitive and visually appealing user interfaces using Figma. Passionate about creating effective app flows that accurately represent the client's vision, following the UX design principles.",
  },
  {
    id: 'expertise-5',
    name: 'Front-end Development',
    icons: [
      { name: 'VueJS', icon: 'logos:vue' },
      { name: 'React', icon: 'logos:react' },
    ],
    description:
      'While not my primary focus, I have worked on several projects building responsive and user-friendly web applications using VueJS. I also have experience with React and React Native for cross-platform development.',
  },
];
---

<section class="py-16 sm:py-20">
  <div class="mx-auto max-w-2xl px-4 sm:px-6 lg:max-w-7xl lg:px-8">
    <div class="grid gap-12 lg:grid-cols-3 lg:gap-8">
      <h2 class="text-3xl font-medium tracking-tight sm:text-4xl">Skills</h2>
      <div class="lg:col-span-2">
        <dl
          class="-mt-3"
          x-data="{ selected: null, toggle(value) { this.selected = this.selected === value ? null : value } }"
        >
          {
            features.map((feature, index) => (
              <div
                class="rounded-3xl px-4 transition"
                x-data={`{ id: ${index}, get isOpen() { return this.id === this.selected }, get isNextOpen() { return (this.id + 1) === this.selected } }`}
                x-bind:class="{ 'bg-primary-500/10 dark:bg-primary-400/10': isOpen }"
              >
                <dt
                  class="border-b text-lg transition"
                  x-cloak
                  x-bind:class="{ 'border-transparent': isOpen || isNextOpen, 'border-primary-900/10 dark:border-primary-300/10': !(isOpen || isNextOpen) }"
                >
                  <button
                    type="button"
                    class="group block w-full py-6 text-left transition focus-visible:outline-none"
                    aria-controls={feature.id}
                    x-on:click="toggle(id)"
                    aria-expanded="false"
                    x-bind:aria-expanded="isOpen.toString()"
                  >
                    <div class="flex items-center justify-between rounded-3xl group-focus-visible:outline group-focus-visible:outline-2 group-focus-visible:outline-offset-2 group-focus-visible:outline-primary-950 dark:group-focus-visible:outline-primary-200">
                      <div class="flex gap-x-6 items-center">
                        <span class="font-medium">{feature.name}</span>
                      <div class="flex items-center justify-between gap-x-4">
                        {feature.icons.map((icon) => (
                          <IconComponent icon={icon.icon} client:load />
                        ))}
                      </div>
                      </div>
                      <span class="ml-6 flex h-7 items-center">
                        <svg
                          class="h-6 w-6 rotate-0 transform text-primary-600 transition duration-200 ease-in-out dark:text-primary-400"
                          x-bind:class="{ '-rotate-180': isOpen, 'rotate-0': !isOpen }"
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 24 24"
                          fill="currentColor"
                          aria-hidden="true"
                        >
                          <path d="M11.9997 13.1714L16.9495 8.22168L18.3637 9.63589L11.9997 15.9999L5.63574 9.63589L7.04996 8.22168L11.9997 13.1714Z" />
                        </svg>
                      </span>
                    </div>
                  </button>
                </dt>
                <dd class="pb-6 pr-6" id={feature.id} x-show="isOpen" x-cloak x-collapse>
                  <p class=" text-base text-primary-950/70 dark:text-primary-200/70">
                    {feature.description}
                  </p>
                </dd>
              </div>
            ))
          }
        </dl>
      </div>
    </div>
  </div>
</section>
